import { motion, AnimatePresence } from "framer-motion"
import { useState } from "react"

export function NutritionalPlanner() {
    const daysOfWeek = [
        "Lunes",
        "Martes",
        "Mi√©rcoles",
        "Jueves",
        "Viernes",
        "S√°bado",
        "Domingo",
    ]
    const mealTypes = [
        { name: "Rompe Ayuno", time: "8:00 AM" },
        { name: "Desayuno", time: "11:00 AM" },
        { name: "Comida", time: "3:00 PM" },
        { name: "Colaci√≥n", time: "6:00 PM" },
        { name: "Cena", time: "9:00 PM" },
    ]

    // Estado para el modal
    const [modalOpen, setModalOpen] = useState(false)
    const [modalContent, setModalContent] = useState("")

    // Creamos el estado inicial para el plan de comidas
    const initialMealPlan = {}
    daysOfWeek.forEach((day) => {
        initialMealPlan[day] = {}
        mealTypes.forEach((type) => {
            initialMealPlan[day][type.name] = []
        })
    })
    const [mealPlan, setMealPlan] = useState(initialMealPlan)

    // Estado para el elemento que se est√° arrastrando
    const [draggingItem, setDraggingItem] = useState(null)

    // Platillos recomendados por categor√≠a con colores para distinguir superalimentos y diamante (‚ô¢) para metabolic activators
    const platillos = {
        "Rompe Ayuno": [
            "üü¢ Pi√±a‚ô¢ con ch√≠a y canela‚ô¢",
            "üü¢ Ar√°ndanos‚ô¢ con yogurt (sin az√∫car)",
            "üü¢ Sand√≠a‚ô¢ con semillas de lino‚ô¢",
            "üü¢ Pera‚ô¢ con t√© verde‚ô¢",
            "üü¢ D√°tiles‚ô¢ rellenos de mantequilla de almendra‚ô¢",
            "üü¢ Mango‚ô¢ con semillas de calabaza‚ô¢",
            "üü° Pl√°tano con nueces",
            "üü° Guayaba con lim√≥n",
            "üü° Chirimoya con semillas de calabaza‚ô¢",
            "üü° Mel√≥n con hojas de menta",
            "üü° Mamey con canela‚ô¢",
        ],
        Desayunos: [
            "üü¢ Huevos‚ô¢ revueltos con esp√°rragos‚ô¢ y cilantro‚ô¢",
            "üü¢ Omelette con br√≥coli‚ô¢ y ghee‚ô¢",
            "üü¢ Pan de lino‚ô¢ con sardinas‚ô¢",
            "üü¢ Quinoa‚ô¢ con semillas de calabaza‚ô¢ y mango‚ô¢",
            "üü¢ Huevos‚ô¢ rancheros con chile jalape√±o‚ô¢ (sin tomate)",
            "üü¢ Caldo de res‚ô¢ con verduras y cilantro‚ô¢",
            "üü¢ Huevos‚ô¢ en salsa verde de tomatillo y jalape√±o‚ô¢",
            "üü° Clara de huevo‚ô¢ con champi√±ones y hojas de nabo‚ô¢",
            "üü° Mijo‚ô¢ con frutas secas y canela‚ô¢",
            "üü° Arroz basmati‚ô¢ con ghee‚ô¢ y especias",
            "üü° Chilaquiles con salsa verde y queso manchego‚ô¢",
        ],
        Comidas: [
            "üü¢ Salm√≥n rey‚ô¢ al horno con br√≥coli‚ô¢ y jengibre‚ô¢",
            "üü¢ Filete de res‚ô¢ con camote‚ô¢ y curry‚ô¢",
            "üü¢ Cordero‚ô¢ asado con alcachofa‚ô¢ y romero",
            "üü¢ Trucha arco√≠ris‚ô¢ con hojas de parra‚ô¢ y lim√≥n",
            "üü¢ Carne de res‚ô¢ asada con nopal y chile jalape√±o‚ô¢",
            "üü¢ Pozole de venado‚ô¢ con col y chile en polvo‚ô¢",
            "üü¢ Tacos de pescado con br√≥coli‚ô¢ (tortilla de ma√≠z)",
            "üü¢ Carnitas de venado‚ô¢ con cilantro‚ô¢ y cebolla",
            "üü° Venado‚ô¢ a la plancha con kale",
            "üü° Bacalao‚ô¢ con pur√© de calabaza y ajo",
            "üü° Arroz salvaje‚ô¢ con h√≠gado de res y cebollas",
            "üü° Sopa de lima con pescado blanco",
        ],
        Colaciones: [
            "üü¢ Almendras‚ô¢ con chocolate‚ô¢ negro",
            "üü¢ Apio con mantequilla de almendra‚ô¢",
            "üü¢ Haba‚ô¢ tostada con especias",
            "üü¢ T√© verde‚ô¢ con ar√°ndanos rojos‚ô¢",
            "üü¢ J√≠cama con chile en polvo‚ô¢ y lim√≥n",
            "üü¢ Toronja‚ô¢ con semillas de lino‚ô¢",
            "üü¢ Totopos de ma√≠z con guacamole (sin tomate)",
            "üü° Pi√±ones con ghee‚ô¢",
            "üü° Jugo de pi√±a‚ô¢ fresca",
            "üü° Caldo de hueso casero",
            "üü° Gajos de lima con sal de mar y chile‚ô¢",
        ],
        Cenas: [
            "üü¢ Sardinas‚ô¢ con ensalada de alcachofa‚ô¢",
            "üü¢ Filete de res‚ô¢ con achicoria‚ô¢ y ghee‚ô¢",
            "üü¢ Huevo‚ô¢ cocido con br√≥coli‚ô¢ y alga wakame‚ô¢",
            "üü¢ Lubina‚ô¢ al horno con chile jalape√±o‚ô¢ y jengibre‚ô¢",
            "üü¢ Tostadas de ma√≠z con carne de res‚ô¢ y vegetales",
            "üü¢ Ceviche de trucha arco√≠ris‚ô¢ con lim√≥n y cilantro‚ô¢",
            "üü¢ Sopa de lima con sardinas‚ô¢ y br√≥coli‚ô¢",
            "üü¢ Filete de res‚ô¢ relleno de verduras con salsa de chile‚ô¢",
            "üü° Cabra‚ô¢ asada con coliflor verde",
            "üü° Ensalada de diente de le√≥n con nueces",
            "üü° Sopa de algas‚ô¢ con verduras de temporada",
            "üü° Salm√≥n‚ô¢ en caldo de jengibre‚ô¢ y lim√≥n",
        ],
    }

    // Lista de toxinas por categor√≠a, con ‚Ä¢ para las que requieren 60 d√≠as de desintoxicaci√≥n
    const toxinas = {
        "Carnes Rojas": ["Coraz√≥n de res ‚Ä¢", "Tocino", "Jam√≥n", "Cerdo"],
        Aves: ["Codorniz", "H√≠gado de pollo", "H√≠gado de pato"],
        "Pescados y Mariscos": [
            "R√≥balo ‚Ä¢",
            "Cangrejo ‚Ä¢",
            "Mero ‚Ä¢",
            "Abul√≥n",
            "Barracuda",
            "Caracol de mar",
            "Bagre",
            "Pulpo",
            "Calamar",
            "Pez espada",
            "Tortuga",
            "Rana",
        ],
        L√°cteos: [
            "Queso cottage ‚Ä¢",
            "Queso feta ‚Ä¢",
            "Queso mozzarella ‚Ä¢",
            "Queso americano",
            "Queso brie",
            "Queso azul",
            "Queso camembert",
            "Queso cheddar",
            "Leche entera de vaca",
            "Yogur",
        ],
        Vegetales: [
            "Aguacate ‚Ä¢",
            "Zanahoria ‚Ä¢",
            "Coliflor ‚Ä¢",
            "Palomitas de ma√≠z ‚Ä¢",
            "Puerro ‚Ä¢",
            "Lechuga ‚Ä¢",
            "Berenjena ‚Ä¢",
            "Champi√±√≥n marr√≥n ‚Ä¢",
            "Aceituna verde ‚Ä¢",
            "Espinaca ‚Ä¢",
            "Tomate verde ‚Ä¢",
            "Tomate ‚Ä¢",
            "Pimiento ‚Ä¢",
            "Brotes de alfalfa",
            "Coles de Bruselas",
            "Pepino",
        ],
        Frutas: [
            "Manzana ‚Ä¢",
            "Albaricoque ‚Ä¢",
            "Cereza ‚Ä¢",
            "Carne de coco ‚Ä¢",
            "Higo ‚Ä¢",
            "Uva ‚Ä¢",
            "Ciruela ‚Ä¢",
            "Granada ‚Ä¢",
            "Ciruela pasa ‚Ä¢",
            "Pasa ‚Ä¢",
            "Pera asi√°tica",
            "Mora",
            "Kiwi",
            "Naranja",
            "Fresa",
        ],
        Bebidas: [
            "Jugo de manzana ‚Ä¢",
            "Jugo de remolacha ‚Ä¢",
            "Jugo de zanahoria ‚Ä¢",
            "Caf√© ‚Ä¢",
            "Leche de almendra ‚Ä¢",
            "Leche de coco ‚Ä¢",
            "Leche de arroz ‚Ä¢",
            "Vino tinto ‚Ä¢",
            "Vino blanco ‚Ä¢",
            "Cerveza",
            "Bebidas de cola",
            "Jugo de naranja",
            "T√© negro",
        ],
    }

    // Funciones para drag and drop adaptadas para Framer
    const handleDragStart = (item) => {
        setDraggingItem(item)
    }

    const handleDrop = (day, mealType) => {
        if (draggingItem) {
            const newPlan = { ...mealPlan }
            if (!newPlan[day][mealType].includes(draggingItem)) {
                newPlan[day][mealType] = [
                    ...newPlan[day][mealType],
                    draggingItem,
                ]
                setMealPlan(newPlan)
            }
            setDraggingItem(null)
        }
    }

    const removeItem = (day, mealType, item) => {
        const newPlan = { ...mealPlan }
        newPlan[day][mealType] = newPlan[day][mealType].filter(
            (i) => i !== item
        )
        setMealPlan(newPlan)
    }

    // Funci√≥n para mostrar el modal con la receta completa
    const showRecipeModal = (recipe) => {
        setModalContent(recipe)
        setModalOpen(true)
    }

    // Funci√≥n para exportar el plan como CSV
    const exportToCSV = () => {
        let csvContent = "data:text/csv;charset=utf-8,"

        // Agregar encabezados
        csvContent += "Tiempo de comida,Horario," + daysOfWeek.join(",") + "\n"

        // Agregar datos
        mealTypes.forEach((mealType) => {
            let row = `${mealType.name},${mealType.time},`
            daysOfWeek.forEach((day) => {
                const meals = mealPlan[day][mealType.name]
                row += `"${meals.join("; ")}"`
                if (day !== daysOfWeek[daysOfWeek.length - 1]) {
                    row += ","
                }
            })
            csvContent += row + "\n"
        })

        // Crear un enlace para descargar
        const encodedUri = encodeURI(csvContent)
        const link = document.createElement("a")
        link.setAttribute("href", encodedUri)
        link.setAttribute("download", "Plan_Nutricional_Hunter.csv")
        document.body.appendChild(link)
        link.click()
        document.body.removeChild(link)
    }

    // Funci√≥n para exportar como PDF (usando window.print como soluci√≥n simple)
    const exportToPDF = () => {
        window.print()
    }

    // Funci√≥n para guardar en localStorage
    const saveToLocalStorage = () => {
        localStorage.setItem("nutritionalPlan", JSON.stringify(mealPlan))
        alert("Plan guardado correctamente")
    }

    // Funci√≥n para cargar desde localStorage
    const loadFromLocalStorage = () => {
        const savedPlan = localStorage.getItem("nutritionalPlan")
        if (savedPlan) {
            setMealPlan(JSON.parse(savedPlan))
            alert("Plan cargado correctamente")
        } else {
            alert("No hay plan guardado")
        }
    }

    // Estilos en l√≠nea para Framer
    const styles = {
        container: {
            padding: "16px",
            backgroundColor: "#f9fafb",
            fontFamily: "Arial, sans-serif",
        },
        header: {
            padding: "16px",
            backgroundColor: "white",
            borderRadius: "8px",
            boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
            marginBottom: "16px",
        },
        headerTitle: {
            fontWeight: "bold",
            fontSize: "20px",
            color: "#16a34a",
        },
        headerSubtitle: {
            fontSize: "14px",
            color: "#4b5563",
        },
        flexWrap: {
            display: "flex",
            flexWrap: "wrap",
            marginTop: "8px",
            fontSize: "12px",
        },
        card: {
            padding: "16px",
            backgroundColor: "white",
            borderRadius: "8px",
            boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
            marginBottom: "16px",
        },
        cardTitle: {
            fontWeight: "bold",
            marginBottom: "8px",
        },
        gridContainer: {
            display: "grid",
            gridTemplateColumns: "repeat(4, 1fr)",
            gap: "8px",
        },
        foodCategory: {
            border: "1px solid #e5e7eb",
            borderRadius: "6px",
            overflow: "hidden",
        },
        categoryHeader: {
            backgroundColor: "#fee2e2",
            padding: "4px",
            fontWeight: "500",
            textAlign: "center",
            borderBottom: "1px solid #e5e7eb",
        },
        categoryContent: {
            padding: "8px",
            maxHeight: "160px",
            overflowY: "auto",
        },
        foodItem: {
            backgroundColor: "#f0fdf4",
            padding: "4px",
            marginBottom: "4px",
            borderRadius: "4px",
            cursor: "pointer",
            fontSize: "12px",
        },
        toxinTitle: {
            fontWeight: "bold",
            marginBottom: "8px",
            color: "#dc2626",
        },
        toxinCategoryHeader: {
            backgroundColor: "#ef4444",
            color: "white",
            padding: "4px",
            fontWeight: "500",
            textAlign: "center",
            borderBottom: "1px solid #e5e7eb",
        },
        toxinContent: {
            padding: "8px",
            maxHeight: "160px",
            overflowY: "auto",
            backgroundColor: "#fef2f2",
        },
        toxinItem: {
            marginBottom: "4px",
            color: "#991b1b",
            fontSize: "12px",
        },
        planTable: {
            width: "100%",
            borderCollapse: "collapse",
        },
        tableHeader: {
            backgroundColor: "#dbeafe",
            padding: "4px",
            textAlign: "center",
            border: "1px solid #e5e7eb",
        },
        tableMealType: {
            backgroundColor: "#f3f4f6",
            padding: "4px",
            fontWeight: "500",
            border: "1px solid #e5e7eb",
        },
        tableCell: {
            border: "1px solid #e5e7eb",
            padding: "8px",
            verticalAlign: "top",
            height: "100px",
            position: "relative",
        },
        mealItem: {
            backgroundColor: "#d1fae5",
            padding: "4px",
            marginBottom: "4px",
            borderRadius: "4px",
            fontSize: "12px",
            display: "flex",
            justifyContent: "space-between",
            cursor: "pointer",
            whiteSpace: "nowrap",
            overflow: "hidden",
            textOverflow: "ellipsis",
            maxWidth: "100%",
            boxSizing: "border-box",
        },
        mealItemText: {
            whiteSpace: "nowrap",
            overflow: "hidden",
            textOverflow: "ellipsis",
            maxWidth: "80%",
            display: "inline-block",
        },
        closeButton: {
            color: "#ef4444",
            marginLeft: "2px",
            fontSize: "12px",
            border: "none",
            background: "transparent",
            cursor: "pointer",
            padding: "0 3px",
        },
        exportButton: {
            backgroundColor: "#16a34a",
            color: "white",
            padding: "8px 16px",
            borderRadius: "4px",
            fontWeight: "500",
            border: "none",
            cursor: "pointer",
            marginRight: "8px",
        },
        saveButton: {
            backgroundColor: "#3b82f6",
            color: "white",
            padding: "8px 16px",
            borderRadius: "4px",
            fontWeight: "500",
            border: "none",
            cursor: "pointer",
            marginRight: "8px",
        },
        loadButton: {
            backgroundColor: "#6366f1",
            color: "white",
            padding: "8px 16px",
            borderRadius: "4px",
            fontWeight: "500",
            border: "none",
            cursor: "pointer",
        },
        buttonContainer: {
            display: "flex",
            marginTop: "12px",
        },
        modal: {
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgba(0, 0, 0, 0.5)",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            zIndex: 1000,
        },
        modalContent: {
            backgroundColor: "white",
            padding: "20px",
            borderRadius: "8px",
            maxWidth: "500px",
            width: "90%",
            position: "relative",
        },
        closeButton: {
            position: "absolute",
            top: "10px",
            right: "10px",
            backgroundColor: "transparent",
            border: "none",
            fontSize: "20px",
            cursor: "pointer",
        },
    }

    return (
        <div style={styles.container}>
            <div style={styles.header}>
                <div style={styles.headerTitle}>
                    PLAN NUTRICIONAL GENOTIPO 1 HUNTER
                </div>
                <div style={styles.headerSubtitle}>
                    Datos del perfil | Peso: 74.2 kg | Grasa: 14.1 kg | M√∫sculo:
                    34.4 kg
                </div>
                <div style={styles.flexWrap}>
                    <div
                        style={{
                            display: "flex",
                            alignItems: "center",
                            marginRight: "8px",
                            marginBottom: "4px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "12px",
                                borderRadius: "9999px",
                                backgroundColor: "#22c55e",
                                marginRight: "4px",
                            }}
                        ></div>
                        <span>Superalimentos (beneficiosos)</span>
                    </div>
                    <div
                        style={{
                            display: "flex",
                            alignItems: "center",
                            marginRight: "8px",
                            marginBottom: "4px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "12px",
                                borderRadius: "9999px",
                                backgroundColor: "#facc15",
                                marginRight: "4px",
                            }}
                        ></div>
                        <span>Alimentos neutros</span>
                    </div>
                    <div
                        style={{
                            display: "flex",
                            alignItems: "center",
                            marginRight: "8px",
                            marginBottom: "4px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "12px",
                                borderRadius: "9999px",
                                backgroundColor: "#ef4444",
                                marginRight: "4px",
                            }}
                        ></div>
                        <span>Evitar (toxinas)</span>
                    </div>
                    <div
                        style={{
                            display: "flex",
                            alignItems: "center",
                            marginBottom: "4px",
                        }}
                    >
                        <span style={{ marginRight: "4px" }}>‚ô¢</span>
                        <span>
                            Activadores metab√≥licos (excelentes para p√©rdida de
                            peso y desarrollo muscular)
                        </span>
                    </div>
                </div>
                <div style={styles.buttonContainer}>
                    <button onClick={exportToCSV} style={styles.exportButton}>
                        Exportar como CSV
                    </button>
                    <button onClick={exportToPDF} style={styles.exportButton}>
                        Imprimir PDF
                    </button>
                    <button
                        onClick={saveToLocalStorage}
                        style={styles.saveButton}
                    >
                        Guardar Plan
                    </button>
                    <button
                        onClick={loadFromLocalStorage}
                        style={styles.loadButton}
                    >
                        Cargar Plan
                    </button>
                </div>
            </div>

            {/* Tabla de planificaci√≥n */}
            <div style={styles.card}>
                <div style={styles.cardTitle}>Planificador Semanal</div>
                <div style={{ overflowX: "auto" }}>
                    <table style={styles.planTable}>
                        <thead>
                            <tr>
                                <th style={styles.tableHeader}></th>
                                {daysOfWeek.map((day) => (
                                    <th key={day} style={styles.tableHeader}>
                                        {day}
                                    </th>
                                ))}
                            </tr>
                        </thead>
                        <tbody>
                            {mealTypes.map((mealType) => (
                                <tr key={mealType.name}>
                                    <td style={styles.tableMealType}>
                                        <div>{mealType.name}</div>
                                        <div
                                            style={{
                                                fontSize: "10px",
                                                color: "#6b7280",
                                            }}
                                        >
                                            {mealType.time}
                                        </div>
                                    </td>
                                    {daysOfWeek.map((day) => (
                                        <td
                                            key={`${day}-${mealType.name}`}
                                            style={styles.tableCell}
                                            onDragOver={(e) =>
                                                e.preventDefault()
                                            }
                                            onDrop={() =>
                                                handleDrop(day, mealType.name)
                                            }
                                        >
                                            {mealPlan[day][mealType.name].map(
                                                (item, idx) => (
                                                    <motion.div
                                                        key={idx}
                                                        style={styles.mealItem}
                                                        initial={{
                                                            opacity: 0,
                                                            y: -10,
                                                        }}
                                                        animate={{
                                                            opacity: 1,
                                                            y: 0,
                                                        }}
                                                        transition={{
                                                            duration: 0.3,
                                                        }}
                                                        onClick={() =>
                                                            showRecipeModal(
                                                                item
                                                            )
                                                        }
                                                    >
                                                        <span
                                                            style={
                                                                styles.mealItemText
                                                            }
                                                        >
                                                            {item.length > 25
                                                                ? `${item.substring(0, 22)}...`
                                                                : item}
                                                        </span>
                                                        <button
                                                            onClick={(e) => {
                                                                e.stopPropagation()
                                                                removeItem(
                                                                    day,
                                                                    mealType.name,
                                                                    item
                                                                )
                                                            }}
                                                            style={
                                                                styles.closeButton
                                                            }
                                                        >
                                                            √ó
                                                        </button>
                                                    </motion.div>
                                                )
                                            )}
                                        </td>
                                    ))}
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>

            {/* Platillos recomendados */}
            <div style={styles.card}>
                <div style={styles.cardTitle}>
                    Platillos Recomendados (Arrastre a la tabla)
                </div>
                <p style={{ fontSize: "12px", marginBottom: "8px" }}>
                    üü¢ Superalimentos | üü° Alimentos neutros | üî¥ Evitar
                </p>
                <div style={styles.gridContainer}>
                    {Object.entries(platillos).map(([category, items]) => (
                        <div key={category} style={styles.foodCategory}>
                            <div style={styles.categoryHeader}>{category}</div>
                            <div style={styles.categoryContent}>
                                {items.map((item, idx) => (
                                    <motion.div
                                        key={idx}
                                        style={styles.foodItem}
                                        whileHover={{ scale: 1.03 }}
                                        whileTap={{ scale: 0.98 }}
                                        draggable
                                        onDragStart={() =>
                                            handleDragStart(item)
                                        }
                                        onClick={() => showRecipeModal(item)}
                                    >
                                        {item.length > 25
                                            ? `${item.substring(0, 22)}...`
                                            : item}
                                    </motion.div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            {/* Lista de toxinas */}
            <div style={styles.card}>
                <div style={styles.toxinTitle}>
                    Alimentos a Evitar (Toxinas)
                </div>
                <p style={{ fontSize: "12px", marginBottom: "12px" }}>
                    <span style={{ fontWeight: "600" }}>Punto negro (‚Ä¢):</span>{" "}
                    Evitar por un m√≠nimo de 60 d√≠as (per√≠odo de
                    desintoxicaci√≥n). Despu√©s, pueden reintroducirse
                    cuidadosamente.
                    <br />
                    <span style={{ fontWeight: "600" }}>Sin punto:</span> Evitar
                    regularmente para obtener mejores resultados.
                </p>
                <div style={styles.gridContainer}>
                    {Object.entries(toxinas).map(([category, items]) => (
                        <div key={category} style={styles.foodCategory}>
                            <div style={styles.toxinCategoryHeader}>
                                {category}
                            </div>
                            <div style={styles.toxinContent}>
                                <ul style={{ paddingLeft: "16px" }}>
                                    {items.map((item, idx) => (
                                        <li key={idx} style={styles.toxinItem}>
                                            {item}
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            {/* Modal para mostrar recetas completas */}
            <AnimatePresence>
                {modalOpen && (
                    <motion.div
                        style={styles.modal}
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        onClick={() => setModalOpen(false)}
                    >
                        <motion.div
                            style={styles.modalContent}
                            initial={{ y: 50, scale: 0.9 }}
                            animate={{ y: 0, scale: 1 }}
                            exit={{ y: 50, scale: 0.9 }}
                            onClick={(e) => e.stopPropagation()}
                        >
                            <button
                                style={styles.closeButton}
                                onClick={() => setModalOpen(false)}
                            >
                                √ó
                            </button>
                            <h3
                                style={{
                                    fontWeight: "bold",
                                    marginBottom: "10px",
                                }}
                            >
                                Receta
                            </h3>
                            <p style={{ fontSize: "16px" }}>{modalContent}</p>
                        </motion.div>
                    </motion.div>
                )}
            </AnimatePresence>
        </div>
    )
}

export default NutritionalPlanner
